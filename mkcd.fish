#!/usr/bin/env fish

# Function: mkcd
# Version: 1.1.0
# Description: Create a directory (with parents) and cd into it
# Installation: Copy to ~/.config/fish/functions/mkcd.fish

set -g MKCD_VERSION "1.1.0"

function mkcd --description "Create a directory and cd into it"
    set SCRIPT_NAME "mkcd"

    function log_info
        logger -t "$SCRIPT_NAME[$fish_pid]" -p user.info $argv
    end

    function log_error
        logger -t "$SCRIPT_NAME[$fish_pid]" -p user.error $argv
    end

    function log_warning
        logger -t "$SCRIPT_NAME[$fish_pid]" -p user.warning $argv
    end

    function log_debug
        logger -t "$SCRIPT_NAME[$fish_pid]" -p user.debug $argv
    end

    function show_version
        echo "mkcd version $MKCD_VERSION"
        return 0
    end

    function run_tests
        log_info "action=test status=starting"
        echo "Running mkcd unit and regression tests..."
        echo ""

        set test_passed true
        set temp_base (mktemp -d)

        # Test 1: Create a simple directory
        echo -n "Test 1: Create simple directory... "
        if not mkdir -p "$temp_base/test1/target" 2>/dev/null
            echo "FAILED"
            set test_passed false
        else
            if test -d "$temp_base/test1/target"
                echo "PASSED"
            else
                echo "FAILED"
                set test_passed false
            end
        end

        # Test 2: Create nested directories
        echo -n "Test 2: Create nested directories... "
        if not mkdir -p "$temp_base/test2/a/b/c/d" 2>/dev/null
            echo "FAILED"
            set test_passed false
        else
            if test -d "$temp_base/test2/a/b/c/d"
                echo "PASSED"
            else
                echo "FAILED"
                set test_passed false
            end
        end

        # Test 3: Directory with spaces
        echo -n "Test 3: Directory with spaces... "
        if not mkdir -p "$temp_base/test3/my dir with spaces" 2>/dev/null
            echo "FAILED"
            set test_passed false
        else
            if test -d "$temp_base/test3/my dir with spaces"
                echo "PASSED"
            else
                echo "FAILED"
                set test_passed false
            end
        end

        # Test 4: Handle existing directory
        echo -n "Test 4: Handle existing directory gracefully... "
        if mkdir -p "$temp_base/test4/existing" 2>/dev/null
            if mkdir -p "$temp_base/test4/existing" 2>/dev/null
                echo "PASSED"
            else
                echo "FAILED"
                set test_passed false
            end
        else
            echo "FAILED"
            set test_passed false
        end

        # Cleanup
        rm -rf "$temp_base"

        echo ""
        if $test_passed
            echo "All tests passed!"
            log_info "action=test status=complete result=success"
            return 0
        else
            echo "Some tests failed!"
            log_error "action=test status=complete result=failure"
            return 1
        end
    end


    function show_help
        echo "Usage: mkcd [options] DIRECTORY"
        echo ""
        echo "Create a directory (including parent directories) and cd into it."
        echo ""
        echo "Arguments:"
        echo "  DIRECTORY             Directory path to create (use quotes for spaces)"
        echo ""
        echo "Options:"
        echo "  -h, --help            Show this help message"
        echo "  -v, --version         Show version information"
        echo "  --test                Run unit and regression tests"
        echo "  --fish-completions    Install fish shell completions"
        echo ""
        echo "Examples:"
        echo "  mkcd foo/bar/baz          # Creates nested directories"
        echo "  mkcd \"my project\"          # Creates directory with spaces"
        echo "  mkcd ~/projects/new       # Creates in home directory"
        return 0
    end

    # Parse arguments
    argparse 'h/help' 'v/version' 'test' 'fish-completions' -- $argv
    or begin
        show_help
        return 1
    end

    if set -q _flag_help
        show_help
        return 0
    end

    if set -q _flag_version
        show_version
        return 0
    end

    if set -q _flag_test
        run_tests
        return $status
    end

    # Handle --fish-completions flag
    if set -q _flag_fish_completions
        set -l completions_file ~/.config/fish/completions/$SCRIPT_NAME.fish

        # Check if file already exists
        if test -f "$completions_file"
            echo "Error: Completions file already exists: $completions_file" >&2
            echo "Remove it first if you want to regenerate completions." >&2
            return 1
        end

        # Ensure directory exists
        mkdir -p ~/.config/fish/completions

        # Generate and write completions
        echo "# Fish completions for $SCRIPT_NAME
# Generated by $SCRIPT_NAME --fish-completions

# Complete flags
complete -c $SCRIPT_NAME -s h -l help -d 'Show help message'
complete -c $SCRIPT_NAME -s v -l version -d 'Show version information'
complete -c $SCRIPT_NAME -l test -d 'Run unit and regression tests'
complete -c $SCRIPT_NAME -l fish-completions -d 'Install fish shell completions'

# Complete directory names for the argument
complete -c $SCRIPT_NAME -f -a \"(__fish_complete_directories)\"
" > "$completions_file"

        and begin
            echo "Fish completions installed to: $completions_file"
            echo ""
            echo "Completions will be available in new fish shell sessions."
            echo "To use them immediately in this session, run:"
            echo "  source $completions_file"
            return 0
        end
        or begin
            echo "Error: Failed to write completions file" >&2
            return 1
        end
    end

    # Check if directory argument is provided
    if test (count $argv) -eq 0
        log_error "action=validate error=\"no directory specified\""
        echo "Error: No directory specified" >&2
        echo "Use 'mkcd --help' for usage information" >&2
        return 1
    end

    # Check if too many arguments
    if test (count $argv) -gt 1
        log_error "action=validate error=\"too many arguments\""
        echo "Error: Too many arguments. Use quotes for directory names with spaces." >&2
        echo "Example: mkcd \"my directory\"" >&2
        return 1
    end

    set target_dir $argv[1]

    # Validate directory name is not empty after trimming
    if test -z "$target_dir"
        log_error "action=validate error=\"empty directory name\""
        echo "Error: Directory name cannot be empty" >&2
        return 1
    end

    # Check if directory already exists
    if test -d "$target_dir"
        log_warning "action=create status=\"already exists\" dir=\"$target_dir\""
        echo "Warning: Directory already exists: $target_dir" >&2
        log_info "action=change_dir dir=\"$target_dir\""
        cd "$target_dir"
        return 0
    end

    # Create the directory with parent directories
    log_info "action=create dir=\"$target_dir\""
    if mkdir -p "$target_dir"
        log_info "action=create status=success dir=\"$target_dir\""
        log_info "action=change_dir dir=\"$target_dir\""
        cd "$target_dir"
        return 0
    else
        set exit_code $status
        log_error "action=create status=failed dir=\"$target_dir\" exit_code=$exit_code"
        echo "Error: Failed to create directory: $target_dir" >&2
        return $exit_code
    end
end
